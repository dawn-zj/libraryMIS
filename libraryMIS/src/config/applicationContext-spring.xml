<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
    			http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
                http://www.springframework.org/schema/context  
                http://www.springframework.org/schema/context/spring-context-3.2.xsd  
                http://www.springframework.org/schema/tx   
                http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
                http://www.springframework.org/schema/aop
                http://www.springframework.org/schema/aop/spring-aop-3.2.xsd ">

	<!-- spring对于类的bean扫描配置，交给SpringMVC的注解自动注入 -->


	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location">
			<!-- <value>classpath:database.properties</value> -->
			<value>file:/opt/zj/gs/conf/config.properties</value>
		</property>
	</bean>

	<!-- 数据源配置 (myBatis和Spring共用) -->
	<!--druid写数据源-->
	<bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.master.driverClassName}"></property>
		<property name="url" value="${jdbc.master.url}"></property>
		<property name="username" value="${jdbc.master.username}"></property>
		<property name="password" value="${jdbc.master.password}"></property>
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
	</bean>

	<!--druid读数据源01-->
	<bean id="slave01DataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.slave01.driverClassName}"></property>
		<property name="url" value="${jdbc.slave01.url}"></property>
		<property name="username" value="${jdbc.slave01.username}"></property>
		<property name="password" value="${jdbc.slave01.password}"></property>
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="20" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
	</bean>

	<!--自定义的动态切换数据源-->
	<bean id="dataSource" class="cn.com.gs.ssm.libraryMIS.dataSource.DynamicDataSource">
		<!-- 设置多个数据源 -->
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<!-- 这个key需要和程序中的key一致 -->
				<entry key="master" value-ref="masterDataSource"/>
				<entry key="slave" value-ref="slave01DataSource"/>
			</map>
		</property>
		<!-- 设置默认的数据源，这里默认走写库 -->
		<property name="defaultTargetDataSource" ref="masterDataSource"></property>
	</bean>

	<!-- myBatis测试时的利用sqlSessionFactory加载配置文件 -->
	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- mybatis全局配置文件路径，配置使用了typeAliasesPackage和mapperLocations就不需要写了 -->
<!-- 		<property name="configLocation" value="classpath:config/SqlMapConfig.xml" /> -->
		<!-- 批量起别名 -->
		<property name="typeAliasesPackage" value="cn.com.gs.ssm.libraryMIS.model"></property>
		<!-- 批量映射xml -->
		<property name="mapperLocations" value="classpath:cn/com/gs/ssm/libraryMIS/mapper/*.xml" ></property>
	</bean>
	<!-- 1.传统方式：配置sqlsession 产生这个实例就是通过 SqlSessionTemplate来实现的 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0"><ref bean="sqlSessionFactory" /></constructor-arg>
	</bean>
	<!-- 2.Mapper代理：配置mapper扫描，自动生成dao实现类，生成的bean名字为Mapper接口类名，首字母小写 -->
	<bean id="mapper" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 指定扫描包路径，即mapper接口包路径 -->
		<property name="basePackage" value="cn.com.gs.ssm.libraryMIS.dao" />
		<!-- 配置sqlSessionFactoryBeanName -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
		<!-- 配置sqlSessionFactory:会导致数据源配置不管用，数据库连接不上。且spring 4弃用-->
<!-- 		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property> -->
	</bean>

	<!-- 配置事务管理 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 开启事务注解 -->
	<tx:annotation-driven transaction-manager="txManager" />

	<!-- 利用AOP,实现对Service的声明式事务管理 -->
	<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="*" rollback-for="java.lang.Exception" />
		</tx:attributes>
	</tx:advice>


	<!-- 读写分离：定义事务策略 -->
	<tx:advice id="dataSourceAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!--定义查询方法都是只读的 -->
			<tx:method name="select*" read-only="true" />
			<tx:method name="search*" read-only="true" />
			<tx:method name="get*" read-only="true" />

			<!-- 主库执行操作，事务传播行为定义为默认行为 -->
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />

			<!--其他方法使用默认事务策略 -->
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>

	<!-- 注入切面 ，日志执行的方法-->
	<!-- 注入切点，使用注解注入 -->
	<bean id="logAspectBean" class="cn.com.gs.ssm.libraryMIS.aop.LogAspect" />
	<!-- <bean id="serviceA" class="com.ssm.libraryMIS.controller.ServiceA" />
	<bean id="serviceB" class="com.ssm.libraryMIS.controller.ServiceB" /> -->
	
	<aop:config>
		<!-- 指向切面 -->
		<aop:aspect id="logAspect" ref="logAspectBean">
			<!-- 切入点表达式 -->
			<aop:pointcut id="logPointcut" expression="execution(* cn.com.gs.ssm.libraryMIS.controller.*.*(..))"/>
			<!-- 在切入点周围要执行的方法，仅仅around支持ProceedingJoinPoint -->
			<aop:around pointcut-ref="logPointcut" method="doAround"/>
		</aop:aspect>
	</aop:config>
	
	<!-- 配置shiro的异常处理 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">redirect:/sysUser/toRefuse.do</prop>
			</props>
		</property>
	</bean>

	<!--dataSource切面-->
	<bean id="dataSourceAspectBean" class="cn.com.gs.ssm.libraryMIS.aop.DataSourceAspect">
		<!-- 指定事务策略 -->
		<property name="txAdvice" ref="dataSourceAdvice"/>
	</bean>
	<aop:config>
		<!-- 指向切面 -->
		<aop:aspect id="dataSourceAspect" ref="dataSourceAspectBean">
			<!-- 切入点表达式 -->
			<aop:pointcut id="dataSourcePointcut" expression="execution(* cn.com.gs.ssm.libraryMIS.service.*.*(..))"/>

			<!-- 在切入点周围要执行的方法-->
			<aop:before pointcut-ref="dataSourcePointcut" method="before"/>
		</aop:aspect>
	</aop:config>

	<!--webservice服务-->
	<bean class="org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter">
		<property name="baseAddress" value="${ws.url}" />
	</bean>
</beans>